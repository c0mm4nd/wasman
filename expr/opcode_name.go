package expr

var names map[OpCode]string // on load

func GetOpCodeName(op OpCode) string {
	if names == nil {
		names = map[OpCode]string{
			OpCodeUnreachable:  "Unreachable",
			OpCodeNop:          "Nop",
			OpCodeBlock:        "Block",
			OpCodeLoop:         "Loop",
			OpCodeIf:           "If",
			OpCodeElse:         "Else",
			OpCodeEnd:          "End",
			OpCodeBr:           "Br",
			OpCodeBrIf:         "BrIf",
			OpCodeBrTable:      "BrTable",
			OpCodeReturn:       "Return",
			OpCodeCall:         "Call",
			OpCodeCallIndirect: "CallIndirect",

			// parametric instruction
			OpCodeDrop:   "Drop",
			OpCodeSelect: "Select",

			// variable instruction
			OpCodeLocalGet:  "LocalGet",
			OpCodeLocalSet:  "LocalSet",
			OpCodeLocalTee:  "LocalTee",
			OpCodeGlobalGet: "GlobalGet",
			OpCodeGlobalSet: "GlobalSet",

			// memory instruction
			OpCodeI32Load:    "I32Load",
			OpCodeI64Load:    "I64Load",
			OpCodeF32Load:    "F32Load",
			OpCodeF64Load:    "F64Load",
			OpCodeI32Load8s:  "I32Load8s",
			OpCodeI32Load8u:  "I32Load8u",
			OpCodeI32Load16s: "I32Load16s",
			OpCodeI32Load16u: "I32Load16u",
			OpCodeI64Load8s:  "I64Load8s",
			OpCodeI64Load8u:  "I64Load8u",
			OpCodeI64Load16s: "I64Load16s",
			OpCodeI64Load16u: "I64Load16u",
			OpCodeI64Load32s: "I64Load32s",
			OpCodeI64Load32u: "I64Load32u",
			OpCodeI32Store:   "I32Store",
			OpCodeI64Store:   "I64Store",
			OpCodeF32Store:   "F32Store",
			OpCodeF64Store:   "F64Store",
			OpCodeI32Store8:  "I32Store8",
			OpCodeI32Store16: "I32Store16",
			OpCodeI64Store8:  "I64Store8",
			OpCodeI64Store16: "I64Store16",
			OpCodeI64Store32: "I64Store32",
			OpCodeMemorySize: "MemorySize",
			OpCodeMemoryGrow: "MemoryGrow",

			// numeric instruction
			OpCodeI32Const: "I32Const",
			OpCodeI64Const: "I64Const",
			OpCodeF32Const: "F32Const",
			OpCodeF64Const: "F64Const",

			OpCodeI32Eqz: "I32Eqz",
			OpCodeI32Eq:  "I32Eq",
			OpCodeI32Ne:  "I32Ne",
			OpCodeI32LtS: "I32LtS",
			OpCodeI32LtU: "I32LtU",
			OpCodeI32GtS: "I32GtS",
			OpCodeI32GtU: "I32GtU",
			OpCodeI32LeS: "I32LeS",
			OpCodeI32LeU: "I32LeU",
			OpCodeI32GeS: "I32GeS",
			OpCodeI32GeU: "I32GeU",

			OpCodeI64Eqz: "I64Eqz",
			OpCodeI64Eq:  "I64Eq",
			OpCodeI64Ne:  "I64Ne",
			OpCodeI64LtS: "I64LtS",
			OpCodeI64LtU: "I64LtU",
			OpCodeI64GtS: "I64GtS",
			OpCodeI64GtU: "I64GtU",
			OpCodeI64LeS: "I64LeS",
			OpCodeI64LeU: "I64LeU",
			OpCodeI64GeS: "I64GeS",
			OpCodeI64GeU: "I64GeU",

			OpCodeF32Eq: "F32Eq",
			OpCodeF32Ne: "F32Ne",
			OpCodeF32Lt: "F32Lt",
			OpCodeF32Gt: "F32Gt",
			OpCodeF32Le: "F32Le",
			OpCodeF32Ge: "F32Ge",

			OpCodeF64Eq: "F64Eq",
			OpCodeF64Ne: "F64Ne",
			OpCodeF64Lt: "F64Lt",
			OpCodeF64Gt: "F64Gt",
			OpCodeF64Le: "F64Le",
			OpCodeF64Ge: "F64Ge",

			OpCodeI32Clz:    "I32Clz",
			OpCodeI32Ctz:    "I32Ctz",
			OpCodeI32PopCnt: "I32PopCnt",
			OpCodeI32Add:    "I32Add",
			OpCodeI32Sub:    "I32Sub",
			OpCodeI32Mul:    "I32Mul",
			OpCodeI32DivS:   "I32DivS",
			OpCodeI32DivU:   "I32DivU",
			OpCodeI32RemS:   "I32RemS",
			OpCodeI32RemU:   "I32RemU",
			OpCodeI32And:    "I32And",
			OpCodeI32Or:     "I32Or",
			OpCodeI32Xor:    "I32Xor",
			OpCodeI32Shl:    "I32Shl",
			OpCodeI32ShrS:   "I32ShrS",
			OpCodeI32ShrU:   "I32ShrU",
			OpCodeI32RotL:   "I32RotL",
			OpCodeI32RotR:   "I32RotR",

			OpCodeI64Clz:    "I64Clz",
			OpCodeI64Ctz:    "I64Ctz",
			OpCodeI64PopCnt: "I64PopCnt",
			OpCodeI64Add:    "I64Add",
			OpCodeI64Sub:    "I64Sub",
			OpCodeI64Mul:    "I64Mul",
			OpCodeI64DivS:   "I64DivS",
			OpCodeI64DivU:   "I64DivU",
			OpCodeI64RemS:   "I64RemS",
			OpCodeI64RemU:   "I64RemU",
			OpCodeI64And:    "I64And",
			OpCodeI64Or:     "I64Or",
			OpCodeI64Xor:    "I64Xor",
			OpCodeI64Shl:    "I64Shl",
			OpCodeI64ShrS:   "I64ShrS",
			OpCodeI64ShrU:   "I64ShrU",
			OpCodeI64RotL:   "I64RotL",
			OpCodeI64RotR:   "I64RotR",

			OpCodeF32Abs:      "F32Abs",
			OpCodeF32Neg:      "F32Neg",
			OpCodeF32Ceil:     "F32Ceil",
			OpCodeF32Floor:    "F32Floor",
			OpCodeF32Trunc:    "F32Trunc",
			OpCodeF32Nearest:  "F32Nearest",
			OpCodeF32Sqrt:     "F32Sqrt",
			OpCodeF32Add:      "F32Add",
			OpCodeF32Sub:      "F32Sub",
			OpCodeF32Mul:      "F32Mul",
			OpCodeF32Div:      "F32Div",
			OpCodeF32Min:      "F32Min",
			OpCodeF32Max:      "F32Max",
			OpCodeF32CopySign: "F32CopySign",

			OpCodeF64Abs:      "F64Abs",
			OpCodeF64Neg:      "F64Neg",
			OpCodeF64Ceil:     "F64Ceil",
			OpCodeF64Floor:    "F64Floor",
			OpCodeF64Trunc:    "F64Trunc",
			OpCodeF64Nearest:  "F64Nearest",
			OpCodeF64Sqrt:     "F64Sqrt",
			OpCodeF64Add:      "F64Add",
			OpCodeF64Sub:      "F64Sub",
			OpCodeF64Mul:      "F64Mul",
			OpCodeF64Div:      "F64Div",
			OpCodeF64Min:      "F64Min",
			OpCodeF64Max:      "F64Max",
			OpCodeF64CopySign: "F64CopySign",

			OpCodeI32WrapI64:   "I32WrapI64",
			OpCodeI32TruncF32S: "I32TruncF32S",
			OpCodeI32TruncF32U: "I32TruncF32U",
			OpCodeI32truncF64S: "I32truncF64S",
			OpCodeI32truncF64U: "I32truncF64U",

			OpCodeI64ExtendI32S: "I64ExtendI32S",
			OpCodeI64ExtendI32U: "I64ExtendI32U",
			OpCodeI64TruncF32S:  "I64TruncF32S",
			OpCodeI64TruncF32U:  "I64TruncF32U",
			OpCodeI64TruncF64S:  "I64TruncF64S",
			OpCodeI64TruncF64U:  "I64TruncF64U",

			OpCodeF32ConvertI32S: "F32ConvertI32S",
			OpCodeF32ConvertI32U: "F32ConvertI32U",
			OpCodeF32ConvertI64S: "F32ConvertI64S",
			OpCodeF32ConvertI64U: "F32ConvertI64U",
			OpCodeF32DemoteF64:   "F32DemoteF64",

			OpCodeF64ConvertI32S: "F64ConvertI32S",
			OpCodeF64ConvertI32U: "F64ConvertI32U",
			OpCodeF64ConvertI64S: "F64ConvertI64S",
			OpCodeF64ConvertI64U: "F64ConvertI64U",
			OpCodeF64PromoteF32:  "F64PromoteF32",

			OpCodeI32ReinterpretF32: "I32ReinterpretF32",
			OpCodeI64ReinterpretF64: "I64ReinterpretF64",
			OpCodeF32ReinterpretI32: "F32ReinterpretI32",
			OpCodeF64ReinterpretI64: "F64ReinterpretI64",

			OpCodeI32Extend8S:  "I32Extend8S",
			OpCodeI32Extend16S: "I32Extend16S",
			OpCodeI64Extend8S:  "I64Extend8S",
			OpCodeI64Extend16S: "I64Extend16S",
			OpCodeI64Extend32S: "I64Extend32S",

			OpCodeNull:   "Null",
			OpCodeIsNull: "IsNull",
			OpCodeFunc:   "Func",
		}

	}

	return names[op]
}
